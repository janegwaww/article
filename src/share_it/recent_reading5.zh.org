#+STARTUP: showall
#+options: toc:nil
#+AUTHOR: JaneGwaww

* TODO 分享最近阅读的书籍清单(五)

#+toc: headlines local

这些都是在人生中的好书藉，我想把这些优秀的东西分享出来，并赋上自己的一些主观想法，能让更多人知道并从中受益。这里只是做一个引荐，精彩需要你自己亲自拜读从中感受。

** How to Take Smart Notes[fn:1]
/One Simple Technique to Boost Writing, Learning and Thinking – for Students, Academics and Nonfiction Book Writers./

#+BEGIN_CENTER
卡片笔记写作法[fn:2]
#+END_CENTER

#+begin_quote
没有人能在不作记录下思考。

--Luhmann
#+end_quote

*我的结论*

我想我们的任何努力都不会白费，只要你肯将他们记录下来并永久保留。大脑是用来思考的，而生活中我们所做的点滴努力让笔记替我们记住, 让人有限的精力尽量去做思考而不是去记忆。但是如何高效的做笔记呢，不至于写过一遍就再也找不到了，或者并不能成为大脑的延展为我们分忧解难，而且让我们的努力白白浪费？而这就是读这本书的好处了。借助此书中的方法[[https://en.wikipedia.org/wiki/Niklas_Luhmann][卢曼]]产出了58本书和数百篇论文，[[https://en.wikipedia.org/wiki/Anthony_Trollope][特罗洛普]]产出了47本小说和16本其他书籍，你要是知道现在的大学毕业生产出一篇论文都要饺尽脑汁你就知道本书方法的强大之处了。而他的本质就是合理组织你所学到的所有知识，当在你要做任何事情时，从过去的所学中提取出你所需要的知识，进行合理的组合来完成你想要做的事，也就是你积累的越多你所能做的就越多，并且在你没有灵感时，能通过不同的组合给予你新的灵感。而要完成这些的关键之处是，要组织起我们所学到的任何知识并为我们所用，就像我们大脑的延伸，想要时随时能联系起来，存在时能充分给予我们源源不断的灵感。 =#todo= 笔记方法。 而要做到这些简单的不能再简单了，你只要几个纸片和一支笔，或者信息时代你只需一个记笔记软件就能做到，可以看看我分享的[[file:recent_reading5.zh.org][这些]]。 当知道方法之后你剩下要做的就是去积累知识吧，没有天生的天才，只要肯努力人人都是天才，毕竟天才也才只有一个脑子。

** TODO The Craft of Text Editing[fn:3]

#+begin_center
文本编辑的技巧
#+end_center

#+begin_quote
好的编程不是从泛泛而谈中学来的，而是通过应用常识和良好的编程实践，了解如何使重要的程序变得干净、易于阅读、易于维护和修改、人为设计、高效和可靠。仔细研究和模仿好的程序可以使写作更好。

--Kernighan and Plauger
#+end_quote

*我的结论*

好书

** Beautiful Racket[fn:4]
/an introduction to language-oriented programming using Racket/

#+begin_center
优雅的Racket：用Racket介绍面向语言编程
#+end_center

#+begin_quote
你认为你已经懂了，并写下来确定了自己的想法，通过教授加深了自己的认知，但是当你实际做出来之后才算你真的理解了。

--Alan Perlis at Yale University computer scientist
#+end_quote

*我的结论*

如何创造一门语言？RacketLisp让这个过程变得简单而有趣。

** TODO Technical Blogging, Second Edition[fn:5]
/Amplify Your Influence/

#+begin_center
技术博客第二版：扩大你的影响力
#+end_center

#+begin_quote
我知道你对工作，对任何事都很失望，也...

我只是想让你自己我理想你的感受。

我曾经也是这样过来的。

而且我敢打赌我比你更痛恨现在的工作，但是30年了我也还是过来了。

只需记住，只要坚持的够久就会有好事发生。

-- Office Space
#+end_quote

*我的结论*

如何打理你的博客？

** Crafting Interpreters[fn:6]

#+begin_center
打造编译器
#+end_center

#+begin_quote
童话的真实不是因为告诉了我们龙的存在，而是恶龙终将被打败。

--G.K. Chesterton by way of Neil Gaiman, Coraline
#+end_quote

*我的结论*

我们第一次接触新鲜事物时总能给我们留下深刻的印象，第一次吃到巧克力，第一次游泳，第一次旅游等。所以学习工作也是一样，当你刚开始学习数学时，你希望曾经的自己接触到的第一本数学书是什么，当你想编程时你希望接触到的第一本编程书是什么，或者你想进入一个新的领域时你希望找到这个领域最适合新手的一本书，他既能照顾到新人的什么都不懂又能窥探整个领域让你有一个整体的认识，学习水到渠成，不至于跌跌撞撞，踩了许多坑，最后学了个皮毛。而这本书就是你希望进入语言这个领域时读的第一本书，至少作者是这么做的。全书通篇会写两个编译器，然后各章节有具体详细步骤，尽量不错过任何的细节，来达成我们所需要的功能。全书三个部份，第一部份介绍，介绍这本书所用到的概念，简单概括书中内容，第二部份为第一个编译器的制作，第三部份为第二个编译器的制作，阅读一本书，特别是有大量内容的书籍，目录和介绍是第一个必须要看的内容，对书有个大概的了解，能把握好阅读的方向。第一个编译器用Java第二编译器用C，虽然都是编译器，但是达成的目地是不同的，第一个编译器着重正确的达到目地，第二个着重更快的达到目地，阅读本书前对Java和C有点了解对阅读是有帮助的。

** TODO Master Emacs[fn:7]

#+begin_center
Emacs高级指南
#+end_center

#+begin_quote
人类是工具型动物...

没了工具他什么都不是，

有了工具他就是全能。

--Thomas Carlyle(1795-1881)
#+end_quote

*我的结论*

好看

** Benjamin Franklin: An American Life[fn:8]

#+begin_center
本杰明.富兰克林传：美国人的一生
#+end_center

#+begin_quote
1. 在一段时间内我要极其节俭，直到偿清所有欠款。

2. 努力在一切场合说真话，不向任何人许下不可能履行的诺官，言一行均以真诚为本，这是一个有理智的人最动人的优点。

3. 要求自己奋致力于正在从事的行业，不因任何一夜暴富的愚计划而动摇，因为勤劳和坚韧是最可靠的致富途径。

4. 不议论他人的短处。

--未来行为准则
#+end_quote

*我的结论*

本杰明.富兰克林集各个头衔于一身，最著明的就是美国开国国父，起草和签定了独立宣言主和美国宪法。美国，可以说是现代文明的开创者和国际规则制定者，是什么造就了如此强大的一个国家，如此强大的一个文明，或许通过了解他的缔造者富兰克林能探窥一二。他最为我们所熟知可能来自于他的风争实验，来对电进行探索，100美元印着他的头像。这本书的作者也写了《史蒂夫·乔布斯传》，至少他写的传记得到了乔布斯肯定。我们可以通过了解这个人，来了解如何通过个人修养也建造自己的强大“王国”。

** Practical Common Lisp[fn:9]

#+begin_center
Common Lisp实践
#+end_center

#+begin_quote
如果你热衷于用尽量简单易懂的代码解决问题，那CommonLisp是目前电脑上最好的语言了。

--摘要
#+end_quote

*我的结论*

如果你是一位经验丰验的工程师，那么用这本书过度到Common Lisp是一个不错的选择，基于已有的智慧与学识可以让我们更轻松面对挑战。而这本书就是在Lisp领域最好的选择，他让你基于已有的经验轻松过度到Lisp并快速应用到工作当中。我听说如何快速上手一门语言：就是用新的语言重新写你曾经做过的项目，例如你比较善长python，并且用他做过机器学习相关的项目，但是python用起来虽然很接近英语，但是他的运行速度也让你一言难尽，于是你听说了Rust这个语言性能接近C语法接近Python，于是你决定用这个语言，这个时候快速入门这个语言最好的方法就是用这个新语言重写一遍你曾经做过的机器学习项目，几周就可以熟练该语言了。这个学习方法很注重实践，而且算法，设计模式，编程方法各个语言大同小异，所以在已有的经验上这个学习方法不失为一个好方法，但是如果一个语言无法让你的思维发生转变，无法让你固有的经验有重新的认识，那么学习他的意义又在哪里呢？可能只剩工作了吧。所以Practical Common Lisp他让你清楚知道你已有的经验如何运用到Lisp这个语言中，并且也让你清楚了解CommonLisp的独到之处，并且有大幅篇章用实际项目实践其中的知识点。不建议新手用这本书入门，新手更推荐[[https://www.cs.cmu.edu/%7Edst/LispBook/][COMMON LISP: A Gentle Introduction to Symbolic Computation]]和[[http://www.paulgraham.com/acl.html][ANSI Common Lisp]]以及后继的[[https://ocw.mit.edu/courses/6-001-structure-and-interpretation-of-computer-programs-spring-2005/][SICP]]。

** Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp[fn:10]

#+begin_center
人工智能编程范式：用CommonLisp作案例讲解
#+end_center

#+begin_quote
现在开始机器在世界上将占有一席之地。

--Herbert Simon
#+end_quote

*我的结论*

人工智能从来不是新鲜玩意，最原始的人工智能语言Lisp距今也已经60多年，而基于此已有成套的理论基础和经典案例了。而最近的风口似乎又回到的人工智能，像是历史的重演，而风浪之后又能留下什么呢！阅读此书最好懂一点CommonLisp，

** 相关阅读

- [[file:recent_reading.org::*分享最近阅读的书籍清单（一）][分享最近阅读的书籍清单(一)]]
- [[file:recent_reading2.zh.org::*分享最近阅读的书籍清单(二)][分享最近阅读的书籍清单(二)]]
- [[file:recent_reading3.zh.org::*分享最近阅读的书藉清单(三)][分享最近阅读的书藉清单(三)]]
- [[file:recent_reading4.zh.org::*分享最近阅读的书籍清单(四)][分享最近阅读的书籍清单(四)]]

* 写在后面
# #+include: "../footer.zh.org"

* Footnotes

[fn:1] [[https://www.amazon.com/How-Take-Smart-Notes-Nonfiction/dp/1542866502]]

[fn:2] [[https://book.douban.com/subject/35503571/]]

[fn:3] [[http://www.finseth.com/craft/]]

[fn:4] [[https://beautifulracket.com/]]

[fn:5] [[https://medium.com/pragmatic-programmers/table-of-contents-10982edb748f]]

[fn:6] [[https://craftinginterpreters.com/]]

[fn:7] [[https://www.masteringemacs.org/]]

[fn:8] https://book.douban.com/subject/26371154/

[fn:9] https://gigamonkeys.com/book/

[fn:10] https://github.com/norvig/paip-lisp
