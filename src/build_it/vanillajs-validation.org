:PROPERTIES:
:ID:       8c0a837b-c2b1-4a25-9752-8157e425d31e
:END:
#+startup: showeverything
#+options: toc:nil
#+title: 用简单的方式实现前验校验也许并不需要任何插件

*前端校验只是对用户的输入做一个简单的检测和提示，它并不是必须的选项。因为前端传入后端的数据一般都是不可靠的，它可以很容易的用一些手段跳过，这是由前端的特性造成的。但是做为一个负责任的工程师，前端传入给你的任何数据都必须经过检验。而前端做到的只是一些基本的校验，而真正的校验需要后端更严格的检测。但是为了用户体验，前端校验又是不得不做的一个基础功能，他针对用户输入的数据做一个提示与反馈来告诉用户当前输入的数据是否有效。*

#+toc: headlines

* 什么是前端校验？

你去任何一个需要注册的网站，当你进入登录注册页面时，网站要求你输入一些信息进行登录或注册，当你输入正确时就是登录或注册成功然后跳到个人页面，当你输入不正确时，例如输入格式不对或者密码输入错误时，网页就会弹出红色提示框说你的输入不正确给予你提示，你可以根据提示，重新输入正确的信息，直到成功为止，然后用户的信息会被保存到数据库上。

你可以不做前端校验，只放一个输入框在页面上，让用户输入你所需要的信息。但是这样做对用户，对后端都会有很大的困扰。
- 在用户这边是：
  1. 我已经输入确认完成了为什么还是停在这个页面，哪里出错了？
  2. 用户无法得到及时的反馈很容易消耗耐心。
- 在后端这边是：
  1. 一个简单的前端校验可以大大提升用户的输入体验，何乐而不为呢。
  2. 计算机做任何动作都需要消耗资源，而前端校验可以过滤掉一些不必要的动作，例如邮箱格式错误，手机号格式错误等。
  3. 软件开发中外部输入的是一种非常不可靠的数据，它有可能传入任何数据，而我们想要保护我们的软件正确运行，就必须对外部传入的数据进行校验，而前端校验也是其中的一环。

** 如何实现前端校验

- 简单的用HTML内置方法

  如果简单直接的用HTML标签中的属性就能满足你的需求，那就JavaScript都不需要了，直接HTML，CSS就能实现了。只是缺少了一定的定制性了。

- 用JavaScript

  用JavaScript实现就可以完全定制你的需求了，还有JavaScript的海量框架。

* 一个简单的用做开始的范例

前端开发最原生的就是三个文件类型：HTML，CSS和JavaScript。只是发展到后面为了提升开发效率，获得更好的开发体验，衍生出了很多框架。例如：React, VUE, TypeScript, jQuery, SASS等。而我们想要最简单的实现前端校验，就用最原生的前端。

- 我们的html文件:

  在 ~form~ 标签中加入一个输入框和一个按钮，这时候还没有加入任何校验。
  #+name: html
  #+begin_src html
    <form>
      <label for="choose">Would you prefer a banana or cherry?</label>
      <input id="choose" name="i-like" />
      <button>Submit</button>
    </form>
  #+end_src

- 我们的css文件:

  我们添加了无效的和有效的输入框样式，即加了不同的边框颜色用以区分它们。
  #+name: css
  #+begin_src css
    input:invalid {
      border: 2px dashed red;
    }
    input:valid {
      border: 2px solid black;
    }
  #+end_src

#+html: <form><style>input:invalid{border: 2px dashed red;}input:valid{border: 2px solid black;}form{border:1px solid gray;border-radius:4px;padding:16px;}</style><label for="choose">Would you prefer a banana or cherry?</label><input id="choose" name="i-like" /><button>Submit</button></form>

* 只用HTML和CSS实现前端校验

HTML的标签本身包含了很多属性，而 ~<input>~ 标签也包含了一些校验输入的属性。其中包括：
- ~required~ :即输入框不能为空，这个输入框是必须输入内容的，例如用户名、密码等是必须要输入的。
- ~pattern~ :用正则进行校验，即你输入的内容要符合正则表达式。
- ~minlength~ 和 ~maxlength~ :即你可输入的字符串最短长度和最长长度。
- ~min~ 和 ~max~ : 你可输入的最小数字和最大数字。
- ~type~ :输入框的类型，指定输入框的类型，即这个是数字输入框还是邮箱输入框还是只是做为一个按钮，数字输入框就只能输入数字，邮箱输入框就只能输入邮箱等。
而在我们使用这些属性之后，输入框就具备了一定的校验功能了。当输入的信息満足这些要求，就会提交信息到后台处理，否则就无法提交信息。然后在[[*一个简单的用做开始的范例][一个简单的用做开始的范例]]的基础之上，我们就用这些属性编写我们的代码。

** 当我们使用 ~require~ 属性

这时我们是要求必须输入内容，只要有内容输入就算満足了我们的校验要求。当输入框为空时不満足要求，输入框边框为红色，当你输入任何内容，边框就变为了黑色(你可以在下面的输入框中试试)。当你不満足要求是直接按 ~Submit~ 按钮就会提示你必须输入内容。

我们的HTML代码：
#+name: required html
#+begin_src html
  <form>
    <label for="choose">Would you prefer a banana or cherry? (required)</label>
    <!-- 直接在input中加上required就行了 -->
    <input id="choose" name="i-like" required />
    <button>Submit</button>
  </form>
#+end_src

我们的CSS的代码：
#+name: required css
#+begin_src css
  input:invalid {
    border: 2px dashed red;
  }
  input:valid {
    border: 2px solid black;
  }
#+end_src

#+html: <form><style>input:invalid{border: 2px dashed red;}input:valid {border: 2px solid black;}</style><label for="choose">Would you prefer a banana or cherry? (required)</label><input id="choose" name="i-like" required /><button>Submit</button></form>

** 用正则表过式规范输入

现在我们要用 ~pattern~ 属性来校验输入，在 ~pattern~ 中用正则表达式作为它的值。前端正则包括[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions][这些]]。这里我们只会用一些简单的表达式介绍这个属性。

HTML代码是：
#+begin_src html
  <form>
    <label for="choose">Would you prefer a banana or a cherry?</label>
    <input id="choose" name="i-like" required pattern="[Bb]anana|[Cc]herry" />
    <button>Submit</button>
  </form>
#+end_src

在这个代码里我们在 ~<input>~ 中加入了 ~pattern="[Bb]anana|[Cc]herry"~ ，这里就是你只能输入：banana或cherry，首字母大小写都可以。CSS代码跟上面一样不变。(在下面试试吧)

可以使用正则大大扩展了 ~<input>~ 校验的可用性，因为你可以使用正则表达式的强大功能去实现一些复杂的校验，例如： ~/^([A-Za-z0-9]|[A-Za-z0-9][\w\-\/\\ ]*[A-Za-z0-9])$/~ 就是你只能输入英文字符，且字符串前后不能是空格。

#+html: <form><style>input:invalid{border: 2px dashed red;}input:valid {border: 2px solid black;}</style><label for="choose">Would you prefer a banana or cherry? (required)</label><input id="choose" name="i-like" required pattern="[Bb]anana|[Cc]herry" /><button>Submit</button></form>

** 用 ~minlength~ 和 ~maxlength~ 规范字符串的长度

在前端你可以用 ~minlength~ 和 ~maxlength~ 在输入框中直接限制用户可输入内容的长度，例如限制字符为20, 即 ~maxlength="20"~ ， 当用户输入20个字符之后，用户再输入则输入框不会有任何反应，然后会告知用户你输入内容已超出最大长度限制，一般很多网站的用户名都有这个限制，为了防止用户名占用太多空间，这些网站都会限制用户输入过长的用户名。

在HTML中的应用，CSS保持不变(在下面试试吧)，这里为了方便展示我们限制字符最短为6最长也为6：
#+begin_src html
  <form>
    <label for="choose">Would you prefer a banana or a cherry?</label>
    <input
      type="text"
      id="choose"
      name="i-like"
      required
      minlength="6"
      maxlength="6" />
    <button>Submit</button>
  </form>
#+end_src

#+html: <form><style>input:invalid{border: 2px dashed red;}input:valid {border: 2px solid black;}</style><label for="choose">Would you prefer a banana or cherry? (required)</label><input type="text" id="choose" name="i-like" required minlength="6" maxlength="6" /><button>Submit</button></form>

** 确定输入框的类型

输入框 ~<input>~ 提供了一个类型的选项 ~type~ , ~type~ 包括哪些在[[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types][这里]]。这里我们展示 ~type="number"~ 即数字输入框，且再用 ~min~ 和 ~max~ 限定它的最小值和最大值，如果输入的数字超出范围则边框变红色。

HTML代码如下，CSS不变：
#+begin_src html
  <form>
    <label for="number">How many would you like?</label>
    <input type="number" id="number" name="amount" value="1" min="1" max="10" />
    <button>Submit</button>
  </form>
#+end_src

#+html: <form><style>input:invalid{border: 2px dashed red;}input:valid {border: 2px solid black;}</style><label for="choose">Would you prefer a banana or cherry? (required)</label><input id="choose" name="i-like" type="number" value="1" min="1" max="10" /><button>Submit</button></form>

当然这里展示的只是 ~<input>~ 标签的部份属性，关于更多<input>标签的属性，例如更多的类型 ~type~ ，可以到[[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input][这里]]查看。

** 总结下HTML+CSS

对于代码我们秉承着能简单就不要复杂，原生能实现就不要用框架的原则。如果你不需要复杂的校验，上面的代码能満足你的需求就尽量用简单的方法实现它，毕竟大型软件的本质就是管理复杂，而其中能简单的地方就简单化。而如果你已经使用了一套框架的流程，或许你可以试试以下使用JavaScript的实现。

* 用JavaScript实现前端校验

** with buid-in api

*** element validation api

*** customized

*** example

** html + css + javascript

** add more validation with functional programming

** react + ramda

** with promise

* summary
