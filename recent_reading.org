#+STARTUP: showeverything

* 分享最近阅读的书藉清单（一）

  #+BEGIN_QUOTE
  从长远来看，我们塑造我们的生活，我们塑造我们自己。这个过程永远不会结束, 直到我们死去。
  而我们做出的选择最终是我们自己的责任。 ---埃莉诺·罗斯福
  #+END_QUOTE

  这些都是在行业中或历史中的经典书藉，我想把这些优秀的书藉分享出来，并賳上自己的一些主观想法，能让更多人知道并从中受益。
  这里只是做一个引荐，精彩需要你自己亲自拜读从中感受。

** Code Complete[fn:1]

   代码大全

   #+BEGIN_QUOTE
   一个软件设计师想通过需求进行合理的，没有错误的程序设计，那是不现实的。
   从来没有那样开发过任何系统，而且可能永远也不会。 甚至教科书和论文中显示的小型程序开发都是不现实的。
   在需求人向我们展示他希望他所要做的事，而不是已经实际发生的事之前，已经对它们进行了修改和修订。
   --- 大卫·帕纳斯（David Parnas）和保罗·克莱门特（Paul Clements）
   #+END_QUOTE

   #+BEGIN_VERSE
   设计是一个启发式过程,隐喻是启示而不是算法。
   典型情况下需求会有多少改动？IBM和其他公司的研究发现， 平均水平的项目在开发过程中，需求会有25%的变化（Boehm 1981，Jones 1994，Jones 2000）。
   在典型的项目中，需求变更导致的返工占到返工总量的75%到85%（Leffingwell 1997，Wiegers 2003）。
   注意项目的商业案例：有些需求作为功能特色来看是不错的想法，但是当你评估“增加的商业价值”时就会觉得它是个糟透了的主意。
   一个好的项目规划者，应能尽早清楚项目中的主要风险，以使大部分工作能平稳进行。
   --- 文中摘要
   #+END_VERSE

   * 我的结论

   我们的设计不能局限于语言，应该利用语言，作为刚入行的人应该阅读他，他提供了丰富的经验和细节，
   而作为经验丰富的从业者也应该翻翻能刷新一些认知；一个项目从需求到设计到编码到发布，我们的主要工作是编码，
   可是结构设计对于项目的生死至关重要，所以设计做好了其他就能一气呵成。这是一本软件设计百科全书，
   囊括了软件设计的方方面面。

   * 第一部份：打好基础

   一本好书的一开始一般会说明为什么会写这本书，本书也不例外。什么是软件构造，软件构造为什么如此重要，以及作为有1000页的大全书你应该如何去使用他。
   当你了解上面这些之后，然后会告诉中软件行业中的一些专业术语，或者说行话吧。（例如你想学数学那你要了解数学公式的表达，因为他可以大大缩减用正常语言来表达一个公式，
   我自己感受最深的是欧几里德几何原本，里面每一卷会给出公理和定义，然后在这些公理和定义之上推理出命题，都是用文字描述的，因为都是建立在公理定义之上的，严谨自不必说，
   但是现在都把这些都换成数学公式，如果你有一定的数学的严谨思维，你可以很快的通读这本书了。） 之后是一个项目开始之前的工作：首先是先决条件，然后你要开发的软件类型，
   并且一定要花足够多时间把这些前期条件作好，因为往往改需求的成本是最高的，以及作为一个开发如何应付领导。 （当要你冲冲上马项目并且与投资人关系不好时，那只能祝你好运了，
   或者假装在做项目了实际没有，第三是在技术上教育领导讲道理，最后是找另一份工作，市场虽然变化莫测但优秀的工程师总是稀缺资源）

   * 第二部分：创建高质量的代码
   * 第三部分：变量
   * 第四部分：语句
   * 第五部分：代码改善
   * 第六部分：系统考虑
   * 第七部分：软件工艺

** Structure and Interpretation of Computer Programs[fn:2]

   计算机程序的构造和解释

   * 我的结论

   这本书，准确的说应该是这门课程，因为这本书是这门课的配套教材，他是MIT的基础编程课程，而这门课在编程中经久不衰，从1985年开始到现在，
   现在MIT基础编程课程改用pythod了。但是lisp这门第二古老语言一点也不过时，而这本书或者说这个课程讲了很多思想也被现在各种软件设计和语言所借鉴。
   如递归，循环，作用域，lamada，分层等，并衍生出了多个方言。

   #+BEGIN_VERSE
   "总之，我希望我们不是为了做任务而做任务。不要觉得自己是做产品销售的。这个世界已经有很多这种人了。
   我们知道的知识别人也将很容易学习到。不要认为成功就是把一切劳动掌握在手中。我们有什么？
   我想也希望是智慧：相比于我们第一次接触计算机科学，我们有能力看到更多，并能做的更多。
   我想我们做计算机科学的最重要是要保持开心。当开始学习时应该有很多乐趣。当我们按客户的需求做事时我们开始认真对待。
   我们也开始为成功和完成产品做事。我认为我们不是。我想我们的责任是把东西朝正确的方向规划出来之后，然后又可以快乐的玩爽了。
   我希望计算机科学永远不要失去乐趣。"
   --- 文中摘要
   #+END_VERSE


** The Pragmatic Programmer: Your Journey to Mastery[fn:3]

   程序员修炼之道-从小工到专家

   #+BEGIN_QUOTE
   生活是你自己的。 分享它。 庆祝它。 构建它。 然后玩得开心！
   --- 最后一个提示
   #+END_QUOTE


** Design Patterns: Elements of Reusable Object-Oriented Software[fn:4]

   设计模式-可复用面向对象软件的基础

   * 我的结论

   橡棋大师和菜鸟的区别是能从棋盘中找到规律而后总能领先对手几步,如果棋子无任何规律摆放那大师和菜鸟没什么区别,
   做开发能从复杂的业务中抽象出普遍的设计模式,并能在遇到问题运用该模式,这就是开发大师和菜鸟的区别,
   这本书首先教你如何用设计模式解决问题然后列举到目前为止的模式并举例子

** Refactoring: Improving the Design of Existing Code,Second Edition[fn:5]

   重构-改善既有代码的设计（第2版）

   #+BEGIN_QUOTE
   任何傻瓜都可以编写计算机可以理解的代码。 而好的程序员编写人类可以理解的代码。
   --- 重构代码tips
   #+END_QUOTE

** TypeScript Documentation[fn:6]

   TypeScript文档主页

   * 我的结论

   珠玉在前，你如何在其上弥补瑕疵？因此一份好的文档尤为重要。JS的弱类型使其容易上手也给了TS机会，但是TS如何做到让别人放心使用他，
   首先由微软做后台，然后着重给做后台的人员使用的前端JS，然后语法上也没有做更多的改变，只是在原语法上扩展了类型，前端开发人员也无须过多的学习成本；
   还有用TS写出的强大好用的主载了前端开发的编辑器vscode；然后最最重要的：一份好的文档，一进入界面，
   就是非常有针对性的关于该语言的你所要知道的让你快速上手的知识，及很多大厂的使用范例，你无需任何顾忌；
   从简单的介绍，快速的上手到说明书再到API配置等，到说明书上针对类型的菜单，无不透露着只要这一份文档你有一定的JS基础不管是前端或后端的就可以简单易上手这个语言了。
   TS能在JS如此流行当下能快速的流行起来不无他的道理。


** Fullstack Vue - The Complete Guide to Vue.js[fn:7]

   全栈VUE

   * 我的结论

   框架全栈系列书藉,先让你用框架最原始的方法写一个APP,让你对技术有一个基础的概念,然后琢步深入用教你如何使用框架,
   这个系列的书藉大体是这个框架，再到组件化开发，定制化事件，全局状态管理，与服务端交互，表单管理等.针对VUE这个书着重介绍单文件组件,Vuex,及VUE开发。

** An Introduction to Programming in Emacs Lisp[fn:8]

   Emacs Lisp编程简介

   * 我的结论

   一个软件的强大或许更再于他文档的齐全和扩展性，作为emacs配套的扩展语言ellisp, 此书是该语言的入门，
   而此书的强大之处是他就像一本教科书级别的编程入门书，所有人都能看懂，当然后面还有更多配套的扩展书藉。

** Composing Software[fn:9]

   撰写软件

   * 我的结论

   用JS讲述编程的本质，即把一个复杂的问题分解为各简单的小问题，用编程单位一般是函数写这些小逻辑，然后把这些方法组合起来，
   解决复杂的业务逻辑。书里包含组合方法，着重介绍函数编程，并且推荐：纯函数>组合函数>组合对象>Mixins>继承，推荐给要在JS上更上一层楼的。

** Eloquent JavaScript[fn:10]

   雄辩的JavaScript

   * 我的结论

   这是另一本全面学习JS的好书，先讨论JS语言，然后与游览器的交互，最后nodejs。这是一本关于计算机指导的书，它立意高，
   通过JS这个跨平台游览器语言来指导编程算法设计等，让你不局限于语言有全局观。他适合初学者没有专业词汇，知识让人易于接受。

** Simplifying JavaScript[fn:11]

   简化JavaScript

   * 我的结论

   如果你纠结于用Object, Array, Map还是Set.那这是一本难得的书，他给你在代码中最直接的提示，
   并分赋值，数据，集合，条件，循环等章节。如何让代码看起来更整洁，选择最优的集合等等。首先给你一个提示然后解释为什么这么做。解决代码选择困难症。

** A Philosophy of Software Design[fn:12]

   软件设计哲学

   * 我的结论

   如果你志力于软件设计，这本书是一个好的开始，它讲述了软件设计的基本原则：减少复杂性，封装方法，变量名，固定的风格等等，
   就是说你想做软件设计遵循这些原则一定是正确的方向。软件设计不一定要遵循这些原则，但一个好的软件设计一定能找到这些哲学。

** Learning GNU Emacs[fn:13]

   学习GNU Emacs

   * 我的结论

   动物书，作为最强大的编辑器，此书的内容确实九牛一毛，简单的介绍，快速的上手，跟其他所有的动物书一样着重操作，
   他也几乎囊括了emacs的各个方面，但是是点到为止，也介绍了几种语言下的配置，emacs可以作为终生工具和操作系统来使用，有一定的编程经验此书作为入门不错。

** Rediscovering JavaScript[fn:14]

   重新发现JavaScript

   * 我的结论

   此书浅显易懂的讲JS最新语法，即使之前没有接触过JS的也能看懂，但如果要全面学习JS的这恐怕不是一本好书。
   他着重讲了JS好的语法，也讲述了JS最新的面向对象编程，同步方法以及更深层次的元编程等，有一定的JS基础此书用来学习JS最新语法是个不错的选择。

** Harley Hahn's Emacs Field Guide[fn:15]

   哈雷·哈恩（Harley Hahn）的Emacs现场指南

   * 我的结论

   工欲善其事必先利其器，好的编辑器可以改变你的思维方式。没人愿意花时间教一个人如何使用工具f，
   你只能通过书来学习练习，而此书就像位老师把emacs历史、环境、益处、使用方法等娓娓道来，有人说如果vim是小孩的玩具，那emacs就是大人的工具。

** fullstack react[fn:16]

   全栈react

   * 我的结论

   作为目前最流行的前端框架，react将交互性做到了最好，而这本书做入门指南也是操作与理论相结合，
   他指导你一步步将代码写出来，并在JS的基础上将react的概念解释清楚，并囊括react周边生态，他有大量的代码，详细的解释，阅读完本书你完全可以写一个react app.

** Land of Lisp[fn:17]

   Lisp之地

   * 我的结论

   这本书语言有趣，用生动的动画讲述lisp这个第二古老的语言，最古老的是Fortran，他到现在还在被使用，
   而目前有很多语言都借鉴了他，包括现在流行的JS，他如此强大，以至于有人说作者发现了这门语言而不是发明他，他语法简洁，以至于当你学习他之后就能取代你熟练的语言成为你的母语。

** 曾国潘家书[fn:18]

** Designing Data-Intensive Applications[fn:19]

   数据密集型应用系统设计

** 史记[fn:20]

** 写在后面

   本清单所列书藉我已读过一遍或多遍

   本清单会持续更新至満意层度

   后期也会随着阅读出新的清单

   本文地址[[https://github.com/tiglapiles/article/blob/master/recent_reading.org]]

   本文博客地址[[https://www.lofter.com/lpost/32137d91_1c991ed56]]

   如果你想访问更多我的文章欢迎访问我的[[https://github.com/tiglapiles/article][github仓库]]

   转载请注明出处


* Footnotes

[fn:20] https://book.douban.com/subject/1077847/

[fn:19] https://book.douban.com/subject/30329536/

[fn:18] https://book.douban.com/subject/1491153/

[fn:17] https://book.douban.com/subject/3704991/

[fn:16] https://book.douban.com/subject/30346678/

[fn:15] https://book.douban.com/subject/26913125/

[fn:14] https://book.douban.com/subject/30322511/

[fn:13] https://book.douban.com/subject/1236987/

[fn:12] https://book.douban.com/subject/30218046/

[fn:11] https://book.douban.com/subject/30251546/

[fn:10] https://book.douban.com/subject/5402021/

[fn:9] https://book.douban.com/subject/35002566/

[fn:8] https://book.douban.com/subject/1432501/

[fn:7] https://book.douban.com/subject/30327032/

[fn:6] https://www.typescriptlang.org/docs/home.html

[fn:5] https://book.douban.com/subject/30468597/

[fn:4] https://book.douban.com/subject/1052241/

[fn:3] https://book.douban.com/subject/1152111/

[fn:2] https://book.douban.com/subject/34464721/

[fn:1] https://book.douban.com/subject/1477390/
