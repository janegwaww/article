#+STARTUP: showeverything

* 分享最近阅读的书藉

  #+BEGIN_QUOTE
  从长远来看，我们塑造我们的生活，我们塑造我们自己。这个过程永远不会结束, 直到我们死去。
  而我们做出的选择最终是我们自己的责任。 ---埃莉诺·罗斯福
  #+END_QUOTE

** Code Complete[fn:1]

   代码大全

   我们的设计不能局限于语言，应该利用语言，作为刚入行的人应该阅读他，他提供了丰富的经验和细节，
   而作为经验丰富的从业者也应该翻翻能刷新一些认知；一个项目从需求到设计到编码到发布，我们的主要工作是编码，
   可是设计对于项目的生死至关重要，所以设计做好了其他就能一气呵成

** Structure and Interpretation of Computer Programs[fn:2]

   计算机程序的构造和解释

   “总之，我希望我们不是为了做任务而做任务。不要觉得自己是做产品销售的。这个世界已经有很多这种人了。
   我们知道的知识别人也将很容易学习到。不要认为成功就是把一切劳动掌握在手中。我们有什么？
   我想也希望是智慧：相比于我们第一次接触计算机科学，我们有能力看到更多，并能做的更多。”

   “我想我们做计算机科学的最重要是要保持开心。当开始学习时应该有很多乐趣。当我们按客户的需求做事时我们开始认真对待。
   我们也开始为成功和完成产品做事。我认为我们不是。我想我们的责任是把东西朝正确的方向规划出来之后，然后自己又可以快乐的玩爽了。
   我希望计算机科学永远不要失去乐


** The Pragmatic Programmer: Your Journey to Mastery[fn:3]

   程序员修炼之道-从小工到专家

** Design Patterns: Elements of Reusable Object-Oriented Software[fn:4]

   设计模式-可复用面向对象软件的基础

   橡棋大师和菜鸟的区别是能从棋盘中找到规律而后总能领先对手几步,如果棋子无任何规律摆放那大师和菜鸟没什么区别,
   做开发能从复杂的业务中抽象出普遍的设计模式,并能在遇到问题运用该模式,这就是开发大师和菜鸟的区别,
   这本书首先教你如何用设计模式解决问题然后列举到目前为止的模式并举例子

** Refactoring: Improving the Design of Existing Code,Second Edition[fn:5]

   重构-改善既有代码的设计（第2版）

** TypeScript Documentation[fn:6]

   珠玉在前，你如何在其上弥补瑕疵？因此一份好的文档尤为重要。JS的弱类型使其容易上手也给了TS机会，但是TS如何做到让别人放心使用他，
   首先由微软做后台，然后着重给做后台的人员使用的前端JS，然后语法上也没有做更多的改变，只是在原语法上扩展了类型，前端开


** Fullstack Vue - The Complete Guide to Vue.js[fn:7]

   无中文版

   框架全栈系列书藉,先让你用框架最原始的方法写一个APP,让你对技术有一个基础的概念,然后琢步深入用教你如何使用框架,
   这个系列的书藉大体是这个框架，再到组件化开发，定制化事件，全局状态管理，与服务端交互，表单管理等.针对VUE这个书着重介绍单文件组件,Vuex,及VUE开发

** An Introduction to Programming in Emacs Lisp[fn:8]

   一个软件的强大或许更再于他文档的齐全和扩展性，作为emacs配套的扩展语言ellisp, 此书是该语言的入门，
   而此书的强大之处是他就像一本教科书级别的编程入门书，所有人都能看懂，当然后面还有更多配套的扩展书藉。

** Composing Software[fn:9]

   用JS讲述编程的本质，即把一个复杂的问题分解为各简单的小问题，用编程单位一般是函数写这些小逻辑，然后把这些方法组合起来，
   解决复杂的业务逻辑。书里包含组合方法，着重介绍函数编程，并且推荐：纯函数>组合函数>组合对象>Mixins>继承，推荐给要在JS上更上一层楼的

** Eloquent JavaScript[fn:10]

   这是另一本全面学习JS的好书，先讨论JS语言，然后与游览器的交互，最后nodejs。这是一本关于计算机指导的书，它立意高，
   通过JS这个跨平台游览器语言来指导编程算法设计等，让你不局限于语言有全局观。他适合初学者没有专业词汇，知识让人易于接受。

** Simplifying JavaScript[fn:11]

   如果你纠结于用Object, Array, Map还是Set.那这是一本难得的书，他给你在代码中最直接的提示，
   并分赋值，数据，集合，条件，循环等章节。如何让代码看起来更整洁，选择最优的集合等等。首先给你一个提示然后解释为什么这么做。解决代码选择困难症。

** A Philosophy of Software Design[fn:12]

   如果你志力于软件设计，这本书是一个好的开始，它讲述了软件设计的基本原则：减少复杂性，封装方法，变量名，固定的风格等等，
   就是说你想做软件设计遵循这些原则一定是正确的方向。软件设计不一定要遵循这些原则，但一个好的软件设计一定能找到这些哲

** Learning GNU Emacs[fn:13]

   学习GNU Emacs

   动物书，作为最强大的编辑器，此书的内容确实九牛一毛，简单的介绍，快速的上手，跟其他所有的动物书一样着重操作，
   他也几乎囊括了emacs的各个方面，但是是点到为止，也介绍了几种语言下的配置，emacs可以作为终生工具和操作系统来使用，有一定的编程经验此书作为入门不错

** Rediscovering JavaScript[fn:14]

   此书浅显易懂的讲JS最新语法，即使之前没有接触过JS的也能看懂，但如果要全面学习JS的这恐怕不是一本好书。
   他着重讲了JS好的语法，也讲述了JS最新的面向对象编程，同步方法以及更深层次的元编程等，有一定的JS基础此书用来学习JS最新语法是个不错的选择。

** Harley Hahn's Emacs Field Guide[fn:15]

   工欲善其事必先利其器，好的编辑器可以改变你的思维方式。没人愿意花时间教一个人如何使用工具f，
   你只能通过书来学习练习，而此书就像位老师把emacs历史、环境、益处、使用方法等娓娓道来，有人说如果vim是小孩的玩具，那emacs就是大人的工

** fullstack react[fn:16]

   作为目前最流行的前端框架，react将交互性做到了最好，而这本书做入门指南也是操作与理论相结合，
   他指导你一步步将代码写出来，并在JS的基础上将react的概念解释清楚，并囊括react周边生态，他有大量的代码，详细的解释，阅读完本书你完全可以写一个react ap

** Land of Lisp[fn:17]

   这本书语言有趣，用生动的动画讲述lisp这个第二古老的语言，最古老的是Fortran，他到现在还在被使用，
   而目前有很多语言都借鉴了他，包括现在流行的JS，他如此强大，以至于有人说作者发现了这门语言而不是发明他，他语法简洁，以至于当你学习他之后就能取代你熟练的语言成为你的母


** 写在后面

   如果你想访问更多我的文章欢迎访问我的[[https://github.com/tiglapiles/article][github仓库]]


* Footnotes

[fn:17] https://book.douban.com/subject/3704991/

[fn:16] https://book.douban.com/subject/30346678/

[fn:15] https://book.douban.com/subject/26913125/

[fn:14] https://book.douban.com/subject/30322511/

[fn:13] https://book.douban.com/subject/1236987/

[fn:12] https://book.douban.com/subject/30218046/

[fn:11] https://book.douban.com/subject/30251546/

[fn:10] https://book.douban.com/subject/5402021/

[fn:9] https://book.douban.com/subject/35002566/

[fn:8] https://book.douban.com/subject/1432501/

[fn:7] https://book.douban.com/subject/30327032/

[fn:6] https://www.typescriptlang.org/docs/home.html

[fn:5] https://book.douban.com/subject/30468597/

[fn:4] https://book.douban.com/subject/1052241/

[fn:3] https://book.douban.com/subject/1152111/

[fn:2] https://book.douban.com/subject/34464721/

[fn:1] https://book.douban.com/subject/1477390/
